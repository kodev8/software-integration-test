name: Deploy Workflow
run-name: ${{ github.actor }} is deploying

on:
    pull_request:
        types: [closed]
        branches:
            - prod
            - preprod
            - dev
            - release/*

jobs:
    check-branch:
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        runs-on: ubuntu-latest
        outputs:
            BRANCH_ENV: ${{ steps.resolve-branch-env.outputs.BRANCH_ENV }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Check branch
              id: resolve-branch-env
              run: |
                  if [[ ${{ github.ref }} =~ refs/heads/release/.* ]]; then
                      branch_env="release"
                  else
                      branch=${{ github.ref }}
                      branch_env="${branch##*/}"
                  fi

                  if [ -z branch_env ]; then
                      echo "Branch not found"
                      exit 1
                  fi

                  echo "RESOLVED=$branch_env"
                  echo "BRANCH_ENV=$branch_env" >> $GITHUB_OUTPUT

    prepare:
        runs-on: ubuntu-latest
        needs: check-branch
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Install dependencies
              run: |
                  npm install
            - name: Copy env file
              run: |
                  touch .env
                  echo "${{ secrets.TEST }}" > .env
            - name: Lint
              run: npm run lint:fix
            - name: Test
              run: npm run test

    build-and-deploy:
        runs-on: self-hosted-${{ needs.check-branch.outputs.BRANCH_ENV }}
        needs:
            - prepare
            - check-branch
        strategy:
            matrix:
                node-version: [22.x]
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Setup Node
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'npm'
            - name: Copy env file
              run: |
                  touch .env

                  git_branch_env=${{ needs.check-branch.outputs.BRANCH_ENV}}
                  if [ $git_branch_env == "prod" ]; then
                      SECRETS="${{ secrets.PROD }}"
                  elif [ $git_branch_env == "preprod" ]; then
                      SECRETS="${{ secrets.PREPROD }}"
                  elif [ $git_branch_env == "dev" ]; then
                      SECRETS="${{ secrets.DEV }}"
                  elif [ $git_branch_env == "release" ]; then
                      SECRETS="${{ secrets.RELEASE }}"
                  fi
                  echo "$SECRETS" > .env

            - name: Install dependencies
              run: npm install
            - name: Build
              run: npm run build --if-present
            - name: start server
              run: |

                  # check if dist/src/index.js exists
                  filename="dist/src/index.js"
                  if [ ! -e $filename ]; then
                      echo "File does not exist"
                      exit 1
                  fi

                  # ensure pm2 is installed
                  if command -v pm2 > /dev/null 2>&1; then
                      echo "pm2 is already installed."
                  else
                      echo "pm2 is not installed. Installing..."
                      # Install pm2 globally using npm
                      npm install -g pm2

                      # Check if the installation was successful
                      if command -v pm2 > /dev/null 2>&1; then
                          echo "pm2 has been installed successfully."
                      else
                          echo "Failed to install pm2. Please check your npm configuration and try again."
                      fi
                  fi

                  process_name=api
                  if pm2 list | grep -q "$process_name"; then
                      echo "Process '$process_name' is already running. Reloading..."
                      pm2 reload "$process_name"
                  else
                      echo "Process '$process_name' is not running. Starting..."
                      pm2 start "$filename" --name="$process_name"
                  fi

                  if [ $? -eq 0 ]; then
                      echo "Server started successfully"
                  else
                      echo "Server failed to start"
                      exit 1
                  fi
